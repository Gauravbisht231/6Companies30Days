class Solution {
    // checking the valid range of unsorted subarray
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n= nums.size();
        int mini= INT_MAX, maxi=INT_MIN;
        for(int i=1; i<n; i++){
            if(nums[i]<nums[i-1]) {
                mini= min(mini,nums[i]);
            }
        }
        for(int j=n-2; j>=0; j--){
            if(nums[j]>nums[j+1]){
                maxi= max(maxi, nums[j]);
            }
        }
        //if the given array is sorted already, then,
        if(mini==INT_MAX and maxi==INT_MIN) return 0;
        // else check the range for the unsorted subarray
            int start=0,end=n-1;
        for(; start<n-1; start++){
                    if(nums[start]>mini) break;
        }
        for(; end>=0; end--){
            if(nums[end]<maxi) break;
        }
        return end-start+1;
    }
};













// class Solution {
//     // brute force
// public:
//     int findUnsortedSubarray(vector<int>& nums) {
//       int n= nums.size();
//       int res=0;
//       if(n==1) return res;
//       //making new vector to compare the elements that aren't at the desired position
//       vector<int> noo(n);
//       for(auto it=0; it<n; it++){
//           noo[it]=nums[it];
//       }
//       //sorting the newly created array
//       sort(noo.begin(), noo.end());
//       int start=0, end=n-1;
//       for(; start<n; start++){
//     if(nums[start]!= noo[start]) break;
//       }
//        if(start>=n-1) return 0;
//       for(; end>=0; end--){
//           if(nums[end]!= noo[end]) break;
//       }
//       return end- start+1;
//     }

// };
