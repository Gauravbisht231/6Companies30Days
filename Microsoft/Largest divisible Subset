class Solution {
public:
    
    int memo[1001];
    vector<int> res;
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        memset(memo,-1,sizeof(memo));
        vector<int> temp;
        helper(nums,temp,0,1);
     
        return res;
        
    }
    
    void helper(vector<int>& nums,vector<int> temp,int start, int prev){
        
      
        if(temp.size()>res.size()){
           res=temp;
        
        }
        
        for(int i=start;i<nums.size();i++){
         
              if(int( memo[i])<int(temp.size())&&nums[i]%prev==0)  {
               memo[i]=temp.size();
               temp.push_back(nums[i]);
               helper(nums,temp,i+1,nums[i]);    
               temp.pop_back();
               }
        }
    }
};
